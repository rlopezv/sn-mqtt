/*
 * Platform  API Manager
 * Platform- g2_sn_node_data_rsAPI
 *
 * OpenAPI spec version: Apache 2.0 License
 * Contact: supportsofia2@indra.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.miot.sn.mqtt.onesait.swagger.client.api;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.miot.sn.mqtt.onesait.swagger.client.ApiCallback;
import com.miot.sn.mqtt.onesait.swagger.client.ApiClient;
import com.miot.sn.mqtt.onesait.swagger.client.ApiException;
import com.miot.sn.mqtt.onesait.swagger.client.ApiResponse;
import com.miot.sn.mqtt.onesait.swagger.client.Configuration;
import com.miot.sn.mqtt.onesait.swagger.client.Pair;
import com.miot.sn.mqtt.onesait.swagger.client.ProgressRequestBody;
import com.miot.sn.mqtt.onesait.swagger.client.ProgressResponseBody;

public class DefaultApi {
	private ApiClient apiClient;

	public DefaultApi() {
		this(Configuration.getDefaultApiClient());
	}

	public DefaultApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for getAll
	 *
	 * @param xOPAPIKey               X-OP-APIKey (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call getAllCall(String xOPAPIKey,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		if (xOPAPIKey != null) {
			localVarHeaderParams.put("X-OP-APIKey", apiClient.parameterToString(xOPAPIKey));
		}

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "application/atom+xml", "text/plain", "text/csv" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json", "application/atom+xml" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call getAllValidateBeforeCall(String xOPAPIKey,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'xOPAPIKey' is set
		if (xOPAPIKey == null) {
			throw new ApiException("Missing the required parameter 'xOPAPIKey' when calling getAll(Async)");
		}

		com.squareup.okhttp.Call call = getAllCall(xOPAPIKey, progressListener, progressRequestListener);
		return call;

	}

	/**
	 *
	 *
	 * @param xOPAPIKey X-OP-APIKey (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void getAll(String xOPAPIKey) throws ApiException {
		getAllWithHttpInfo(xOPAPIKey);
	}

	/**
	 *
	 *
	 * @param xOPAPIKey X-OP-APIKey (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> getAllWithHttpInfo(String xOPAPIKey) throws ApiException {
		com.squareup.okhttp.Call call = getAllValidateBeforeCall(xOPAPIKey, null, null);
		return apiClient.execute(call);
	}

	/**
	 * (asynchronously)
	 *
	 * @param xOPAPIKey X-OP-APIKey (required)
	 * @param callback  The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call getAllAsync(String xOPAPIKey, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getAllValidateBeforeCall(xOPAPIKey, progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for insert
	 *
	 * @param xOPAPIKey               X-OP-APIKey (required)
	 * @param body                    (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call insertCall(String xOPAPIKey, String body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		if (xOPAPIKey != null) {
			localVarHeaderParams.put("X-OP-APIKey", apiClient.parameterToString(xOPAPIKey));
		}

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json", "application/atom+xml", "text/plain", "text/csv" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = { "application/json", "application/atom+xml" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call insertValidateBeforeCall(String xOPAPIKey, String body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'xOPAPIKey' is set
		if (xOPAPIKey == null) {
			throw new ApiException("Missing the required parameter 'xOPAPIKey' when calling insert(Async)");
		}

		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling insert(Async)");
		}

		com.squareup.okhttp.Call call = insertCall(xOPAPIKey, body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 *
	 *
	 * @param xOPAPIKey X-OP-APIKey (required)
	 * @param body      (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void insert(String xOPAPIKey, String body) throws ApiException {
		insertWithHttpInfo(xOPAPIKey, body);
	}

	/**
	 *
	 *
	 * @param xOPAPIKey X-OP-APIKey (required)
	 * @param body      (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> insertWithHttpInfo(String xOPAPIKey, String body) throws ApiException {
		com.squareup.okhttp.Call call = insertValidateBeforeCall(xOPAPIKey, body, null, null);
		return apiClient.execute(call);
	}

	/**
	 * (asynchronously)
	 *
	 * @param xOPAPIKey X-OP-APIKey (required)
	 * @param body      (required)
	 * @param callback  The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call insertAsync(String xOPAPIKey, String body, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = insertValidateBeforeCall(xOPAPIKey, body, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
